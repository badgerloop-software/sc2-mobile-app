name: SC2 Mobile App - Build Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: 🏗 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🏗 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: 📦 Install dependencies
      run: npm ci
    
    - name: 🔍 Check for vulnerabilities
      run: npm audit --audit-level=high
      continue-on-error: true
    
    - name: 🏗 Setup Expo CLI
      run: npm install -g @expo/cli eas-cli
    
    - name: ⚙️ Validate Expo configuration
      run: npx expo config --type public
    
    - name: 🔍 Run Expo Doctor
      run: npx expo doctor
    
    - name: 📱 Test Metro bundler
      run: |
        # Test if Metro can bundle the app successfully
        npx expo export --platform all --dev --output-dir ./test-build
        echo "✅ Metro bundling successful"
    
    - name: 📊 Check bundle size
      run: |
        if [ -d "./test-build" ]; then
          echo "Bundle size:"
          du -sh ./test-build
          
          # Get size in KB
          size_kb=$(du -s ./test-build | cut -f1)
          echo "Bundle size: ${size_kb}KB"
          
          # Warning if > 50MB
          if [ $size_kb -gt 51200 ]; then
            echo "⚠️  Warning: Bundle size is large (${size_kb}KB > 50MB)"
          else
            echo "✅ Bundle size is acceptable"
          fi
        fi
    
    - name: 🧪 Validate key files
      run: |
        echo "Checking essential files..."
        
        # Core files
        test -f package.json && echo "✅ package.json exists"
        test -f app.json && echo "✅ app.json exists"
        test -f App.js && echo "✅ App.js exists"
        
        # Screen files
        test -f src/screens/HomeScreen.js && echo "✅ HomeScreen.js exists"
        test -f src/screens/BatteryScreen.js && echo "✅ BatteryScreen.js exists"
        test -f src/screens/SystemsScreen.js && echo "✅ SystemsScreen.js exists"
        test -f src/screens/EnvironmentalScreen.js && echo "✅ EnvironmentalScreen.js exists"
        
        # Data files
        test -f src/data/telemetryData.js && echo "✅ telemetryData.js exists"
        
        # Components
        test -f src/components/SolarCar3DViewer.js && echo "✅ SolarCar3DViewer.js exists"
        test -f src/components/Battery3DViewer.js && echo "✅ Battery3DViewer.js exists"
        
        # 3D Model placeholders
        test -f src/assets/models/solar-car.glb.placeholder && echo "✅ Solar car placeholder exists"
        test -f src/assets/models/battery-cells.glb.placeholder && echo "✅ Battery cells placeholder exists"
        
        # Documentation
        test -f docs/3D-MODEL-WORKFLOW.md && echo "✅ 3D model workflow docs exist"
        test -f docs/github-actions-setup.md && echo "✅ GitHub Actions docs exist"
        
        echo "✅ All essential files validated"
    
    - name: 🔍 Check for common issues
      run: |
        echo "Checking for common issues..."
        
        # Check for invalid icon names
        if grep -r "battery-quarter" src/; then
          echo "❌ Found invalid icon name: battery-quarter"
          exit 1
        fi
        
        # Check for missing imports
        if grep -r "import.*from.*'[^'].*'" src/ | grep -v node_modules | grep -E "(undefined|null)" ; then
          echo "⚠️  Potential missing imports found"
        fi
        
        # Check for TODO/FIXME comments
        todo_count=$(grep -r "TODO\|FIXME" src/ --include="*.js" --include="*.jsx" 2>/dev/null | wc -l)
        if [ $todo_count -gt 0 ]; then
          echo "ℹ️  Found $todo_count TODO/FIXME comments"
        fi
        
        echo "✅ Common issues check completed"
    
    - name: 🧪 Test app structure
      run: |
        # Test if main App.js can be parsed
        node -e "
          try {
            const fs = require('fs');
            const appContent = fs.readFileSync('App.js', 'utf8');
            if (appContent.includes('NavigationContainer')) {
              console.log('✅ Navigation setup found');
            }
            if (appContent.includes('SafeAreaProvider')) {
              console.log('✅ Safe area provider found');
            }
            if (appContent.includes('tabBarStyle')) {
              console.log('✅ Tab bar styling found');
            }
            console.log('✅ App.js structure validated');
          } catch (error) {
            console.error('❌ App.js validation failed:', error.message);
            process.exit(1);
          }
        "
    
    - name: 📱 Test telemetry data
      run: |
        # Test if telemetry data can be generated
        node -e "
          try {
            const { generateMockTelemetryData } = require('./src/data/telemetryData');
            const data = generateMockTelemetryData();
            if (data && data.soc && data.speed) {
              console.log('✅ Telemetry data generation successful');
              console.log('Sample data: SOC=' + data.soc + '%, Speed=' + data.speed + 'mph');
            } else {
              throw new Error('Invalid telemetry data structure');
            }
          } catch (error) {
            console.error('❌ Telemetry data test failed:', error.message);
            process.exit(1);
          }
        "
    
    - name: 🎯 Summary
      run: |
        echo "🎉 Build check completed successfully!"
        echo "✅ Dependencies installed"
        echo "✅ Expo configuration valid"
        echo "✅ Bundle creation successful"
        echo "✅ File structure validated"
        echo "✅ Telemetry system working"
        echo ""
        echo "Ready for development and testing! 🚀"
